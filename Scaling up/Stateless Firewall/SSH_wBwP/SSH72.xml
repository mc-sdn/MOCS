<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Property: A[] not invariant_changed()
// invariant_changed() reads the invariant_slot of P[1] (in order not have the invariant variable as a real bit)

/* Manual bitfield manipulation - UPPAAL has not bitfield construct of its own
 */

//const int Bound = 1;
//const int multiplicity =  1;
const int switches     =  7;
const int clients      =  2;
const int ports        =  2;  /* the max number of ports a switch in the topology in question might have */
const int priorities   =  1;

const int rules_no     =  3;   
const int packets_no   =  4;    // |ssh| x ports  

/* 
 *
 *****************************************************************************************************************
 *
 *    SWITCHES
 *
 *****************************************************************************************************************
 * 
 */
const bool oo_pq = 1; // this is the infinite abstraction
const bool oo_pIOq = 0; // this is the infinite abstraction
const bool oo_cq = 0; // this is the infinite abstraction
const bool fwd_optimisation = 1;
const bool ctrl_optimisation = 1;
const bool stateful_controller = 0;

const bool all_pkts_1_shot = 0;

//const bool optimisation_on = 0;




/*   The default integer range in UPPAAL is small (±2^16). 
 *   However, integer ranges up to 32 bits are supported, so we define custom ranges 
 */

typedef int [-(1 &lt;&lt;31),(1&lt;&lt;31)-1] int32_t ; // a signed 32 bit integer data type (−2,147,483,648 to 2,147,483,647)
typedef int [0,(1&lt;&lt;32)-1] uint32_t ; // an unsigned 32 bit integer data type (0 to 4,294,967,295)

/*
 *  Defining bit flags : a symbolic constant to give a meaningful name to each bit used 
 *                       (left-shift operator to shift a bit into the proper location).
 */
//const	int32_t	bit0	=	1	&lt;&lt;	0	;  // 0000 0000 0000 0000 0000 0000 0000 0001 (2^0)
//const	int32_t	bit1	=	1	&lt;&lt;	1	;  // 0000 0000 0000 0000 0000 0000 0000 0010 (2
//const	int32_t	bit2	=	1	&lt;&lt;	2	;  // 0000 0000 0000 0000 0000 0000 0000 0100
//const	int32_t	bit3	=	1	&lt;&lt;	3	;  // 0000 0000 0000 0000 0000 0000 0000 1000
//const	int32_t	bit4	=	1	&lt;&lt;	4	;  // 0000 0000 0000 0000 0000 0000 0001 0000
//const	int32_t	bit5	=	1	&lt;&lt;	5	;  // 0000 0000 0000 0000 0000 0000 0010 0000
//const	int32_t	bit6	=	1	&lt;&lt;	6	;  // 0000 0000 0000 0000 0000 0000 0100 0000
//const	int32_t	bit7	=	1	&lt;&lt;	7	;  // 0000 0000 0000 0000 0000 0000 1000 0000
//const	int32_t	bit8	=	1	&lt;&lt;	8	;
//const	int32_t	bit9	=	1	&lt;&lt;	9	;
//const	int32_t	bit10	=	1	&lt;&lt;	10	;
//const	int32_t	bit11	=	1	&lt;&lt;	11	;
//const	int32_t	bit12	=	1	&lt;&lt;	12	;
//const	int32_t	bit13	=	1	&lt;&lt;	13	;
//const	int32_t	bit14	=	1	&lt;&lt;	14	;
//const	int32_t	bit15	=	1	&lt;&lt;	15	;
//const	int32_t	bit16	=	1	&lt;&lt;	16	;
//const	int32_t	bit17	=	1	&lt;&lt;	17	;
//const	int32_t	bit18	=	1	&lt;&lt;	18	;
//const	int32_t	bit19	=	1	&lt;&lt;	19	;
//const	int32_t	bit20	=	1	&lt;&lt;	20	;
//const	int32_t	bit21	=	1	&lt;&lt;	21	;
//const	int32_t	bit22	=	1	&lt;&lt;	22	;
//const	int32_t	bit23	=	1	&lt;&lt;	23	;
//const	int32_t	bit24	=	1	&lt;&lt;	24	;
//const	int32_t	bit25	=	1	&lt;&lt;	25	;
//const	int32_t	bit26	=	1	&lt;&lt;	26	;
//const	int32_t	bit27	=	1	&lt;&lt;	27	;
//const	int32_t	bit28	=	1	&lt;&lt;	28	;
//const	int32_t	bit29	=	1	&lt;&lt;	29	;
//const	int32_t	bit30	=	1	&lt;&lt;	30	;
//const	int32_t	bit31	=	1	&lt;&lt;	31	;



// to turn bit 4 ON  of variable v we use bitwise OR:   v |= bit4;    or    v |= 1 &lt;&lt; 4;
// to turn bit 4 OFF of variable v we use bitwise AND with an inverse bit pattern:   v = v &amp;(bit4 ^ -1);
// to toggle a bit state we use bitwise XOR:
//                                            v ^= bit4;          --flip bit4 from on to off, or vice versa
//                                            v ^= (bit4 | bit5); --flip bit4 and 5 at the same time  
// to toggle all bits:    v ^= -1             
// Determining if a bit is on or off:  
//                                    if (v &amp; bit4) then "v has bit4 set"
//                                    if (!(v &amp; bit4)) then "v does not have bit4 set"




/* Function to get no of bits in binary 
   representation of positive integer */
int countBits(int[0,(1&lt;&lt;15)-1] n){
  int bits = 0; 
   while (n) 
   { 
        bits++; 
        n &gt;&gt;= 1; 
    } 
    return bits; 
}


/* 
 * Packet Match fields
 */
const int _in_port_       = 1; 
const int _out_port_      = 2;
const int _ssh_           = 3; 
const int _prio_          = 4; 
const int _install_       = 5; 
const int _barrier_       = 6; /* if a rule has barrier set it means that previous rules must be installed first */
/* 
 * Location
 */
const int _pb_            = 9;
const int _pIb_           = 10;
const int _pOb_           = 11;
const int _cb_            = 12;
const int _ft_            = 13;






int bitfield_length(int field){

  int bits;

        if(field == _in_port_)     {bits = 2;}
  else  if(field == _out_port_)    {bits = 2;}
  else  if(field == _ssh_)         {bits = 1;}
  else  if(field == _prio_)        {bits = 2;}
  else  if(field == _install_)     {bits = 1;}
  else  if(field == _pb_)          {bits = switches;}
  else  if(field == _pIb_)         {bits = switches;}
  else  if(field == _pOb_)         {bits = switches;}
  else  if(field == _cb_)          {bits = switches;}
  else  if(field == _ft_)          {bits = switches;}

    return bits;
}




int from_bit(int field)
{
  int from ;

         if(field == _in_port_)    {from =  0;}
   else  if(field == _out_port_)   {from =  2;}
   else  if(field == _ssh_)        {from =  4;}
   else  if(field == _pb_)         {from =  5;}
   else  if(field == _pIb_)        {from =  12;}
   else  if(field == _pOb_)        {from =  19;}

   else  if(field == _prio_)       {from =  5;}
   else  if(field == _install_)    {from =  7;}
   else  if(field == _barrier_)    {from =  8;}
   else  if(field == _cb_)         {from =  9;}
   else  if(field == _ft_)         {from =  16;}

    return from;
}

const int invariant_slot = 25; // in P[1]


const int32_t mask_in_port     = ((1 &lt;&lt; bitfield_length(_in_port_)) -1 )     &lt;&lt; from_bit(_in_port_);
const int32_t mask_out_port    = ((1 &lt;&lt; bitfield_length(_out_port_)) -1 )    &lt;&lt; from_bit(_out_port_);
const int32_t mask_ssh         = ((1 &lt;&lt; bitfield_length(_ssh_)) -1 )         &lt;&lt; from_bit(_ssh_);
const int32_t mask_prio        = ((1 &lt;&lt; bitfield_length(_prio_)) -1 )        &lt;&lt; from_bit(_prio_);
const int32_t mask_install     = ((1 &lt;&lt; bitfield_length(_install_)) -1 )     &lt;&lt; from_bit(_install_);
const int32_t mask_pb          = ((1 &lt;&lt; bitfield_length(_pb_)) -1 )          &lt;&lt; from_bit(_pb_);
const int32_t mask_pIb         = ((1 &lt;&lt; bitfield_length(_pIb_)) -1 )         &lt;&lt; from_bit(_pIb_);
const int32_t mask_pOb         = ((1 &lt;&lt; bitfield_length(_pOb_)) -1 )         &lt;&lt; from_bit(_pOb_);
const int32_t mask_cb          = ((1 &lt;&lt; bitfield_length(_cb_)) -1 )          &lt;&lt; from_bit(_cb_);
const int32_t mask_ft          = ((1 &lt;&lt; bitfield_length(_ft_)) -1 )          &lt;&lt; from_bit(_ft_);

const int32_t mask_same_pkt    = mask_in_port |  mask_ssh;
const int32_t mask_same_rule   = mask_in_port |  mask_out_port |  mask_ssh  | mask_prio | mask_install;   



//const int32_t mask_src = 3;          // b00000000000000000000000000000011  - 2^from + 2^to
//const int32_t mask_dest = 12;        // b00000000000000000000000000001100
//const int32_t mask_in_port = 48;     // b00000000000000000000000000110000
//const int32_t mask_out_port = -64;   // b00000000000000000000000011000000
//const int32_t mask_reached = 16128;  // b00000000000000000011111100000000
//const int32_t mask_prio = 256;       // b00000000000000000000000100000000
//const int32_t mask_install = 512;    // b00000000000000000000001000000000
//const int32_t mask_pb = 1032192;     // b00000000000011111100000000000000
//const int32_t mask_pIb = 66060288;   // b00000011111100000000000000000000
//const int32_t mask_pOb = -67108864;  // b11111100000000000000000000000000
//const int32_t mask_cb = -1024;       // b00000000000000001111110000000000
//const int32_t mask_ft = 4128768;     // b00000000001111110000000000000000




const int32_t init_rule = (1 &lt;&lt; from_bit(_prio_)) | (1 &lt;&lt; from_bit(_install_));






typedef int[1,rules_no] rul;
typedef int[1,packets_no] pkts;


typedef int[0,switches-1] SW0; /* Set of all switches (bounded integer) */
typedef int[0,clients-1] C0;   /* Set of all clients */


typedef int[5000,4999+switches] SW; /* Set of all switches (bounded integer) - shifted */
typedef int[6000,5999+clients] C;   /* Set of all clients -shifted */
typedef int[4999,5999+clients] mis_SW_C; /* All nodes: clients, switches and the misconn */
typedef int[-22,10] priority_t;
typedef int[-22,ports] port_t;
typedef int[1,ports] phys_ports;



const int wildcard      = 0;  
const int discard       =  0;  /* -1 encodes the drop action */
const int recipient_missing = -1; /* recipient_missing from MAC table */
const int misconnection       = 4999;
const int client_port   =   1;
const int first_switch   = 5000;
const int last_switch   = 4999 + switches;
const int mid_switch    = 5000 + switches/2;
const int first_client   = 6000;
const int last_client   = 5999 + clients;

//const int32_t invariant_changed = 1 &lt;&lt; 31;


int32_t P[pkts]; 
int32_t R[rul]; 





void set_bit(int32_t &amp;n, int pos){

    n |= 1 &lt;&lt; pos;
}


void clear_bit(int32_t &amp;n, int pos){

    n &amp;= ((1 &lt;&lt; pos) ^ -1);  
}



/* A bitfield is a range of bits working as a single number. 
 * We (usually) can't access these ranges directly because 
 * memory is accessed in (multi-)byte-sized datatypes
 * Bits 0-1, for e.g., are acting as 'src', 2 and 3 as the 'dest' field and 4-6 as the 'reached', etc.
 *
 * For e.g., assuming that up to 3 ports are present in the topology, two bits are enough (mask = 3) to store them. 
 * So, the in_port pt will be encoded in packet pk (positions 10 and 11) as follows:

pt: **************nn  // 
pt: 00000000000000nn  // pt &amp; 3
pt: 0000nn0000000000  // pt = (pt &amp; 3) &lt;&lt; 10

pk: bbbbPPtttttttttt  // 
pk: bbbb00tttttttttt  // pk = (pk &amp; ((3 &lt;&lt; 10) ^ -1) )
pk: bbbbnntttttttttt  // pk = pk | pt


 */
void encode_bitfield(int field_id, int dec_new_field_val, int32_t &amp;p_r){

  int from = from_bit(field_id);
  int mask = (1 &lt;&lt; bitfield_length(field_id)) -1 ;  // for "masking off" (masking to 0) 

    if(bitfield_length(field_id) == 1){

        set_bit(p_r, from_bit(field_id) );

    }
    else{
        dec_new_field_val = (dec_new_field_val &amp; mask) &lt;&lt; from_bit(field_id);
        p_r = (p_r &amp; (   (mask &lt;&lt; from_bit(field_id)) ^ -1 )         );
        p_r = p_r | dec_new_field_val;
    } 

}




int decode_bitfield(int field_id, int32_t p_r){

  int32_t i = p_r;
  int mask = (1 &lt;&lt; bitfield_length(field_id)) -1 ; // for "masking off" (masking to 0) 
  int32_t y;

    if(bitfield_length(field_id) == 1){
        if( i &amp; (1 &lt;&lt; from_bit(field_id)) ){
            y = 1;
        }
        else{
            y = 0;
        }
    }
    else{
        y = (i &gt;&gt;  from_bit(field_id) ) &amp; mask;
    }

    return y; 

}


void undef_packet_32(int32_t &amp;p){

  //  p |= 1 &lt;&lt; 31 ;  // 1000 0000 0000 0000 0000 0000 0000 0000 (- 2,147,483,648)
     p = 0;
}





void undef_rule_32(int32_t &amp;r){

   // r |= 1 &lt;&lt; 31 ;  // 1000 0000 0000 0000 0000 0000 0000 0000 (- 2,147,483,648)
      r = 0;
}




int out_port_of_packet_32(int32_t p){
    return (decode_bitfield(_out_port_,p));
}



bool oo_32(int32_t p1, int32_t p2){


       return(        
                ((p1 &amp; mask_same_pkt)        ==     (p2 &amp; mask_same_pkt))      
        );
}


int priority_of_rule_32(int32_t r){
    return (decode_bitfield(_prio_,    r));
}

int out_port_of_rule_32(int32_t r){
    return (decode_bitfield(_out_port_,r));
}


/* An undefined field (wildcard, all-x), can be matched by any packet's corresponding field 
 * r1 is the one already installed and r2 the one to be installed
 */
bool same_rules_32(int32_t r1, int32_t r2) 
{

  int32_t r1_ssh_m =  r1 &amp; mask_ssh;
  int32_t r2_ssh_m =  r2 &amp; mask_ssh;

  int32_t r1_in_port_m =  r1 &amp; mask_in_port;
  int32_t r2_in_port_m =  r2 &amp; mask_in_port;

  int32_t r1_out_port_m =  r1 &amp; mask_out_port;
  int32_t r2_out_port_m =  r2 &amp; mask_out_port;

  int32_t r1_prio_m =  r1 &amp; mask_prio;
  int32_t r2_prio_m =  r2 &amp; mask_prio;

  int32_t r1_install_m =  r1 &amp; mask_install;
  int32_t r2_install_m =  r2 &amp; mask_install;

    return(

    r1 != 0 &amp;&amp; r2 != 0        and

    (  r1_ssh_m == wildcard imply r2_ssh_m == wildcard   )  and
    (  r2_ssh_m == wildcard imply r1_ssh_m == wildcard   )  and

    (  r1_in_port_m == wildcard imply r2_in_port_m == wildcard   )  and
    (  r2_in_port_m == wildcard imply r1_in_port_m == wildcard   )  and

    (  r1_ssh_m     != wildcard imply r1_ssh_m     == r2_ssh_m      )  and
    (  r1_in_port_m != wildcard imply r1_in_port_m == r2_in_port_m  )  and

                                                      (  r1_out_port_m == r2_out_port_m )  and
                                                      (  r1_prio_m     == r2_prio_m     )  and
                                                      (  r1_install_m  == r2_install_m  )  
   ) ;
}



bool oo_rules_32(int32_t r1, int32_t r2) 
{

    return(

            ((r1 &amp; mask_same_rule)        ==     (r2 &amp; mask_same_rule))    
                                              ) ;
}




/* Two flow entries overlap if a single packet may match both, and  
 * if a field is undefined for one rule and defined for another
 * coz undefined (omitted) fields are wildcards (having value ANY): we say field is wildcarded (not present)
 */
bool overlapping_rules_32(int32_t r1, int32_t r2)
{

  int32_t r1_ssh_m =  r1 &amp; mask_ssh;
  int32_t r2_ssh_m =  r2 &amp; mask_ssh;

  int32_t r1_in_port_m =  r1 &amp; mask_in_port;
  int32_t r2_in_port_m =  r2 &amp; mask_in_port;


    return(

            (r1 != 0 &amp;&amp; r2 != 0                      and

              ( same_rules_32(r1,r2)   ||

               !( 
                    (  r1_ssh_m == wildcard imply r2_ssh_m == wildcard   )  and
                    (  r2_ssh_m == wildcard imply r1_ssh_m == wildcard   )  and

                    (  r1_in_port_m == wildcard imply r2_in_port_m == wildcard   )  and
                    (  r2_in_port_m == wildcard imply r1_in_port_m == wildcard   )  
                ) 
              )                                                           
            )                                               
          );
}





//linear search 
int rule_position(int32_t r)
{
   int j; 

   for (j = 1; j &lt;= rules_no; ++j)
   {
      if ( oo_rules_32(R[j], r))
      {
         return j; 
      }
   }
   return -1; //value not found
}


//iterative binary search
int rule_position_32(int32_t r){
   int first  = 1;
   int last   = rules_no;
   int middle;
   
    while (first &lt;= last)
    {
        middle = first + (last - first)/2;

        if ((r&amp;mask_same_rule) == (R[middle]&amp;mask_same_rule))
            return middle;

        if ((r&amp;mask_same_rule) &gt; (R[middle]&amp;mask_same_rule))
            first = middle + 1;
        else 
            last = middle - 1;
    }
    return -1; //search value not found
}


bool rule_has_barrier_32(rul r, SW sw){
 
    return (   (R[r] &amp; (1 &lt;&lt; (from_bit(_barrier_) ) )) != 0 );
}

bool rule_installed_32(rul r, SW sw){
 
    return (   (R[r] &amp; (1 &lt;&lt; (from_bit(_ft_)+sw-first_switch) )) != 0 );
}
 

bool rule_in_cb_32(rul r, SW sw){
 
    return (   (R[r] &amp; (1 &lt;&lt; (from_bit(_cb_)+sw-first_switch) )) != 0 );
}

bool rule_adds_flow_entry_32(rul r, SW sw){
 
    return (   (R[r] &amp; mask_install) != 0  );
}



void send_rule_32(rul r, SW sw){

    if(
        (  rule_adds_flow_entry_32(r, sw) and !rule_installed_32(r,sw)  )  or  
        ( !rule_adds_flow_entry_32(r, sw) and  rule_installed_32(r,sw)  )
    ){
        set_bit(  R[r], from_bit(_cb_)+sw-first_switch  );
    }
}
   

void add_rule_to_ft_32(rul r, SW sw){

        set_bit(  R[r], from_bit(_ft_)+sw-first_switch  );
    
}




void conn(int[4999,5999+clients] &amp;node, port_t &amp;port){


  int[4999,5999+clients] adjacent_n = misconnection;
  phys_ports adjacent_n_p;

             if    (node == first_switch  &amp;&amp; port == 1) { adjacent_n = 6000;  adjacent_n_p = client_port    ;    }
        else if    (node == last_switch   &amp;&amp; port == 2) { adjacent_n = 6001;  adjacent_n_p = client_port    ;    }

        else if    (node != last_switch   &amp;&amp; port == 2) { adjacent_n = node+1;  adjacent_n_p = 1              ;    }
        else if    (node != first_switch  &amp;&amp; port == 1) { adjacent_n = node-1;  adjacent_n_p = 2              ;    }

        else if    (node == 6000 ) { adjacent_n = first_switch;  adjacent_n_p = 1    ;    }
        else if    (node == 6001 ) { adjacent_n = last_switch;   adjacent_n_p = 2    ;    }


    node = adjacent_n;
    port = adjacent_n_p;
}


int switch_of_client(int[4999,5999+clients] c){
  port_t port_c;       
        conn(c, port_c);
  return c;       
}


int switch_port_of_client(int[4999,5999+clients] c){
  port_t port_c;       
        conn(c, port_c);
  return port_c;       
}


bool valid_switch_port(int[4999,5999+clients] sw, port_t p){
  int[4999,5999+clients] A_node = sw ;
  int[4999,5999+clients] B_node;
        conn(A_node, p);
        B_node = A_node;
  return B_node != misconnection;
}


int number_of_valid_switch_ports(int[4999,5999+clients] sw){
  port_t j;
  int[4999,5999+clients] A_node = sw ;
  int[4999,5999+clients] B_node;
  int p;

    for(i : phys_ports){
        j = i;
        conn(A_node, j);
        B_node = A_node;
        if(B_node != misconnection){
            p++;
        }
    A_node = sw;
    }
  return p;
}



bool switch_client_conn(SW sw, C c){
  int i = 1;
  port_t j;
  bool sw_c;  
  int[4999,5999+clients] A_node;
  int[4999,5999+clients] B_node;
       
    while(i &lt;= ports and not sw_c) {
        j = i;
        A_node = sw;
        conn(A_node, j);
        B_node = A_node;
        if(B_node == c){    
            sw_c = true;
        }
    i++;
    }
  return sw_c;       
}


bool swsw_direct_connection(SW sw1, SW sw2){
  int i = 1;
  port_t j;  
  bool sw_sw;  
  int[4999,5999+clients] A_node ;
  int[4999,5999+clients] B_node;
       
    while(i &lt;= ports and not sw_sw) {
        j = i;
        A_node = sw1;
        conn(A_node, j);
        B_node = A_node;
        if(B_node == sw2){    
            sw_sw = true;
        }
    i++;
    }
  return sw_sw;       
}



int[4999,5999+clients] next_hop_box(port_t out_port, int[4999,5999+clients] A_node ){
    conn(A_node,out_port); 
return A_node;
}


port_t next_hop_box_port(port_t out_port, int[4999,5999+clients] A_node ){
    conn(A_node,out_port); 
return out_port;
}



bool node_is_client(int[4999,5999+clients] node){
    return(
            node &gt;= 6000 &amp;&amp; node &lt; 6000+clients
          );
}

bool node_is_switch(int[4999,5999+clients] node){
    return(
            node &gt;= 5000 &amp;&amp; node &lt; 5000+switches
          );
}


bool client_connecting_switch_port(SW sw, port_t p){
  int[4999,5999+clients] A_node = sw ;
  int[4999,5999+clients] B_node;

    conn(A_node, p);
    B_node = A_node;
    return node_is_client(B_node);
}



void generate_Rules(){

      int32_t r_1 = init_rule;
      int32_t r_2 = init_rule;
      int32_t r_3 = init_rule;

        encode_bitfield(_ssh_,  1, r_1);
        encode_bitfield(_prio_, 3, r_1);
        R[1] = r_1;

        encode_bitfield(_in_port_,  1, r_2);
        encode_bitfield(_out_port_, 2, r_2);
        set_bit(  r_2, from_bit(_barrier_)  );
        R[2] = r_2;

        encode_bitfield(_in_port_,  2, r_3);
        encode_bitfield(_out_port_, 1, r_3);
        R[3] = r_3;
}


/* We generate here all possible packets according to the 
 * packet fields in question, i.e., ssh and in_port
 */
void generate_Packets(){

  int32_t p_32;

int j = 1;
    for(ssh : int[0,1]){
                    for(in : phys_ports){
                                if(ssh != 0){
                                            set_bit(p_32, from_bit(_ssh_));
                                }
                                            encode_bitfield(_in_port_, in, p_32);
                                            for(sw : SW){
                                                set_bit(  p_32, from_bit(_pb_)+sw-first_switch  );
                                            }
                                            P[j] = p_32;
                                            j++;  
                                            undef_packet_32(p_32);
                    }
    }
}



void selectionSort()
{
  int i, j, min_idx, temp;  
    // One by one move boundary of unsorted subarray  
    for (i = 1; i &lt; packets_no; i++)  
    {  
        // Find the minimum element in unsorted array  
        min_idx = i;  
        for (j = i+1; j &lt;= packets_no; j++)  
        if (P[j] &lt; P[min_idx])  
            min_idx = j;  
  
        // Swap the found minimum element with the first element  
        temp = P[min_idx];
        P[min_idx]  = P[i];
        P[i] = temp; 
    }  

    for (i = 1; i &lt; rules_no; i++)  
    {  
        // Find the minimum element in unsorted array  
        min_idx = i;  
        for (j = i+1; j &lt;= rules_no; j++)  
        if (R[j] &lt; R[min_idx])  
            min_idx = j;  
  
        // Swap the found minimum element with the first element  
        temp = R[min_idx];
        R[min_idx]  = R[i];
        R[i] = temp; 
    }  

} 

void BubbleSort()
{
    int i, j;
    int32_t temp;
 	for (i = 1; i &lt;= packets_no; i++)
 	{
		for (j = 1; j &lt;= packets_no - i; j++ )
		{
			if ((P[j] &amp; mask_same_pkt) &gt; (P[j+1]&amp;mask_same_pkt))
            {
                temp = P[j];
                P[j] = P[j+1];
                P[j+1] = temp;
            }
         }
     }


 	for (i = 1; i &lt;= rules_no; i++)
 	{
		for (j = 1; j &lt;= rules_no - i; j++ )
		{
			if ((R[j] &amp; mask_same_rule) &gt; (R[j+1]&amp;mask_same_rule))
            {
                temp = R[j];
                R[j] = R[j+1];
                R[j+1] = temp;
            }
         }
     }

 } 






bool packet_in_pb_32(pkts p, SW sw){
 
    return (  (P[p] &amp; (1 &lt;&lt; (from_bit(_pb_)+sw-first_switch) )) != 0); // it's not like C++ where non zero integers automatically convert to true
}


bool packet_in_pIb_32(pkts p, SW sw){

    return (  (P[p] &amp; (1 &lt;&lt; (from_bit(_pIb_)+sw-first_switch) )) != 0 );
}

bool packet_in_pOb_32(pkts p, SW sw){

    return (  (P[p] &amp; (1 &lt;&lt; (from_bit(_pOb_)+sw-first_switch) )) != 0 );
}






//linear search 
int packet_pos(int32_t pkt)
{
   int j; 

   //loop through array
   for (j = 1; j &lt;= packets_no; ++j)
   {
      if ( oo_32(P[j], pkt))
      {
         return j; 
      }
   }
   return -1; //value not found
}


//binary search
int packet_position(int32_t pkt){

   int first  = 1;
   int last   = packets_no;
   int middle;
   
    while (first &lt;= last)
    {
        middle = first + (last - first)/2;

        if ((pkt&amp;mask_same_pkt) == (P[middle]&amp;mask_same_pkt))
            return middle;

        if ((pkt&amp;mask_same_pkt) &gt; (P[middle]&amp;mask_same_pkt))
            first = middle + 1;
        else 
            last = middle - 1;
    }
    return -1; //search value not found
}





/* This function stores packets to pq of sw. 
 */
void addpkt_32(int32_t pkt, SW sw){  
  int pb_pos = from_bit(_pb_)+sw-first_switch;
  int pkt_pos =  packet_position(pkt);
    if((pkt &amp; (1 &lt;&lt; (pb_pos) )) == 0){      
        set_bit(  P[pkt_pos], pb_pos  );
        encode_bitfield(_out_port_, 0, P[pkt_pos]);

    }
}



/* the arrival of an, say, protocol_of_interest == Telnet packet to the client violates the specification, thus invariant_failed = true;
 */
void check_invariant(int32_t p){
    if(   (p &amp; (1 &lt;&lt; (from_bit(_ssh_) ) )) != 0   ){

        set_bit(  P[1], invariant_slot  );
    }
}



bool invariant_changed(){
    return((P[1] &amp; (1 &lt;&lt; invariant_slot )) != 0 );
}





void forward_32(int32_t p, port_t out_port, int[4999,5999+clients] A_node ){

    int[4999,5999+clients] node = A_node;
    C B_node_client;
    SW B_node_switch;
    int32_t new_pk;
    port_t __out_port = out_port;    
    new_pk = p;


    conn(node,__out_port); 

    if(out_port != 0)  {     
        if(node_is_client(node)){ /* node == client */
                B_node_client = node;
                check_invariant(new_pk);
        }
        else if(node_is_switch(node)){ /* node is switch */
                           B_node_switch = node; 						   
                           encode_bitfield(_in_port_, __out_port, new_pk);
                           addpkt_32(new_pk,B_node_switch);
         }
        else if(node == misconnection) {  /* Packet loss due to misconnection (the conn-function didn't find entry)  */
        }
    }
}





void flood_32(int32_t p, SW sw){
    for(i : phys_ports){
        if(i != decode_bitfield(_in_port_,p)  and valid_switch_port(sw, i)  ){  /* All valid physical ports except input port and the symbolic 'discard' one. */
           forward_32(p, i, sw);
        }
    }
}





/* A packet matches a flow table entry if the values in the packet match fields used for the lookup match
 * those defined in the flow table entry. If a flow table entry field has a value of ANY (field omitted), it
 * matches all possible values in the header.
 */
bool matched_32(int32_t p, int32_t r)
{
  int32_t r_ssh_m =  r &amp; mask_ssh;
  int32_t p_ssh_m =  p &amp; mask_ssh;

  int32_t r_in_port_m =  r &amp; mask_in_port;
  int32_t p_in_port_m =  p &amp; mask_in_port;

	return( r != 0

          and  (  r_ssh_m     == wildcard or r_ssh_m     == p_ssh_m       )  
          and  (  r_in_port_m == wildcard or r_in_port_m == p_in_port_m   )  
    ) ;
}






bool there_is_a_match_in_ft_32(int32_t p, SW sw)
{
	return(  exists(i : rul)  
              matched_32(p, R[i]) &amp;&amp;
              rule_installed_32(i,sw) 
    ) ;
}







//============





/* returns the highest priority whose rule matches the packet to be forwarded
 *** The packet is matched against the table and only the highest priority flow entry that matches the
 *** packet must be selected. 
 */
priority_t highest_priority_match_32(int32_t p, SW sw){
  priority_t max = 0;
  priority_t current_priority;

    for(i : rul){
      if(rule_installed_32(i,sw) and matched_32(p, R[i])){
        current_priority = priority_of_rule_32(R[i]);
            if(max &lt; current_priority){
                max = current_priority;
            }
      }
    }
return max;
}




/* returns the the highest priority rule index whose pattern matches the packet in switch sw’s flow table. */ 
int rule_index_best_match_32(int32_t p, SW sw){
  priority_t current_priority;
  int j;

        current_priority = highest_priority_match_32(p, sw);

        if (current_priority &gt; 0){  /* there's a match */
            for(j : rul){
                if(rule_installed_32(j,sw) and priority_of_rule_32(R[j]) == current_priority and matched_32(p,R[j])) {
                    return j;
				}
			}
		}
	return -1;  //value not found
}



bool fwd_is_visible_32(int32_t p, port_t out_port, int[4999,5999+clients] A_node ) {
    int[4999,5999+clients] node = A_node;
    conn(node,out_port); 

    return ( node_is_client(node) and ( (p &amp; (1 &lt;&lt; (from_bit(_ssh_)) )) != 0) ) ;
}



bool ctrl_is_visible_32(int32_t p, SW sw ) {
    return false;
}





/*
 * ========================================================================================
 *                                                                     
 *   CONTROLLER PROGRAM
 *
 * ========================================================================================
 */

void controller_32(pkts p, SW sw){

  int32_t pkt = P[p];
  port_t in_port, out_port;

  in_port = decode_bitfield(_in_port_, pkt);

   
    for(i : rul){
        send_rule_32(i, sw);
    }


        if(    (pkt &amp; (1 &lt;&lt; (from_bit(_ssh_) ) )) != 0    ){
                            out_port = discard;
        }
        else{ 
            if (in_port == 1){
                            out_port = 2;
            }
            else{
                            out_port = 1;
            }
        }



            if(fwd_optimisation == 1 and not fwd_is_visible_32(pkt, out_port, sw) ){
                forward_32(pkt, out_port, sw);
            }
            else{
                set_bit(P[p], from_bit(_pOb_)+sw-first_switch );
                encode_bitfield(_out_port_, out_port, P[p]);

            }
}
/*
 * ========================================================================================
 * ========================================================================================
 */

</declaration>
	<template>
		<name>undef</name>
		<declaration>void undefine_queues(){
    int i;
       for(i : pkts){
            undef_packet_32(P[i]);
       }
       for(i : rul){
           undef_rule_32(R[i]);
       }    
}



/* this method builds packets deterministically.  
 */
void off(){
        undefine_queues();
        generate_Rules();
        generate_Packets();
}
</declaration>
		<location id="id0" x="119" y="59">
		</location>
		<location id="id1" x="42" y="85">
			<committed/>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="assignment" x="17" y="195">off()</label>
			<nail x="42" y="153"/>
			<nail x="132" y="89"/>
		</transition>
	</template>
	<template>
		<name>pqSw</name>
		<parameter>const SW sw</parameter>
		<declaration>
void remove_pk_from_pq_32(pkts p, SW sw){
    if(oo_pq != 1                                    ){
                    clear_bit(P[p], from_bit(_pb_)+sw-first_switch );        
    }
}




void process_unmatched_packets_32(pkts p, SW sw){
        if(ctrl_optimisation == 1 and not ctrl_is_visible_32(P[p], sw) ){
            controller_32(p, sw);
        }
        else{
            set_bit(  P[p], from_bit(_pIb_)+sw-first_switch  );
         }
        remove_pk_from_pq_32(p, sw);
}




void forward_matched_pkt_32(pkts p, SW A_node ){
    int32_t new_p;
    int[4999,5999+clients] node = A_node;
    C B_node_client;
    SW B_node_switch;
    port_t out_port;
    new_p = P[p];
    out_port = out_port_of_rule_32(R[rule_index_best_match_32(new_p, A_node)]);


    if(out_port != discard){
        conn(node, out_port ); 
        if(node_is_client(node)){ /* node == client */
                B_node_client = node;
                check_invariant(new_p);
        }
        else if(node_is_switch(node)){ /* node is switch */
                           B_node_switch = node;
                           encode_bitfield(_in_port_, out_port, new_p);
                           addpkt_32(new_p,B_node_switch);
        }
        else if(node == misconnection) {  /* Packet loss due to misconnection (the conn-function didn't find entry)  */

        }
    }
    remove_pk_from_pq_32(p, A_node );
}


void proces_matched_pkts_32(pkts p, SW sw)
{
    forward_matched_pkt_32(p, sw);
    if(all_pkts_1_shot == 1){
        for(i : pkts)
            if(packet_in_pb_32(i, sw) and rule_index_best_match_32(P[p], sw) == rule_index_best_match_32(P[i], sw) and p != i){
                forward_matched_pkt_32(i, sw);
            }
        }
}</declaration>
		<location id="id2" x="0" y="0">
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="select" x="-161" y="51">p : pkts</label>
			<label kind="guard" x="-246" y="85">packet_in_pb_32(p, sw) &amp;&amp;
!there_is_a_match_in_ft_32(P[p], sw)</label>
			<label kind="assignment" x="-238" y="127">process_unmatched_packets_32(p, sw)</label>
			<label kind="comments" x="34" y="68">TABLE-MISS</label>
			<nail x="-25" y="68"/>
			<nail x="17" y="102"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="select" x="-221" y="-221">p : pkts</label>
			<label kind="guard" x="-289" y="-170">packet_in_pb_32(p, sw) &amp;&amp;
there_is_a_match_in_ft_32(P[p], sw)</label>
			<label kind="assignment" x="-229" y="-93">proces_matched_pkts_32(p, sw )</label>
			<label kind="comments" x="51" y="-68">MATCH</label>
			<nail x="0" y="-68"/>
			<nail x="42" y="-68"/>
		</transition>
	</template>
	<template>
		<name>pIq</name>
		<declaration>






void remove_pk_from_pIq_32(pkts p, SW sw){   
int i,j;
        if(oo_pIOq != 1  
                     //   or (oo_pIOq == 1 and !oo_alpha(Packets[p], sw) )
                                                                        ){    	
 	        clear_bit(P[p], from_bit(_pIb_)+sw-first_switch ); 
        }	
}
</declaration>
		<location id="id3" x="-51" y="-68">
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="select" x="-365" y="-255">p : pkts,
sw: SW</label>
			<label kind="guard" x="-374" y="-187">packet_in_pIb_32(p, sw)</label>
			<label kind="assignment" x="-391" y="-127">controller_32(p,  sw),
remove_pk_from_pIq_32(p, sw)</label>
			<nail x="-281" y="-34"/>
			<nail x="-281" y="-68"/>
		</transition>
	</template>
	<template>
		<name>pOq</name>
		<parameter>const SW sw</parameter>
		<declaration>

void remove_pk_from_pOq_32(pkts p, SW sw){
    if(oo_pIOq != 1){
        clear_bit(P[p], from_bit(_pOb_)+sw-first_switch );
    }
}</declaration>
		<location id="id4" x="0" y="0">
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="select" x="-153" y="-153">p : pkts</label>
			<label kind="guard" x="-144" y="-127">packet_in_pOb_32(p, sw)</label>
			<label kind="assignment" x="-170" y="-59">forward_32(P[p], out_port_of_packet_32(P[p]), sw),
remove_pk_from_pOq_32(p, sw)</label>
			<nail x="-162" y="0"/>
			<nail x="-162" y="85"/>
		</transition>
	</template>
	<template>
		<name>cq</name>
		<parameter>const SW sw</parameter>
		<declaration>/* exists a barrier at pos-i (which should be before r or the r-pos itself is the barrier), 
 * and also there are other rules in cq before the barrier
 *
 * This is a simplified implementation of barrier which works as long as the order in which the rules are sent in the cq matches the order in R[], 
 * which in this case does.
 */
bool barrier_precedes(SW sw, rul r){

	return(  exists(i : rul)  exists(j : rul) rule_has_barrier_32(i, sw) and i &lt;= r  and rule_in_cb_32(j, sw) and !rule_installed_32(j, sw) and j &lt; i
                
        ) ;
}




void remove_rule_from_cq_32(rul r, SW sw){
    if(oo_cq != 1){
        clear_bit(R[r], from_bit(_cb_)+sw-first_switch );
    }
}


void remove_rule_from_ft_32(rul r, SW sw){

    clear_bit(R[r], from_bit(_ft_)+sw-first_switch );
}
</declaration>
		<location id="id5" x="63" y="90">
			<label kind="comments" x="-263" y="51">Α switch is allowed to arbitrarily reorder
processing of control-plane messages;
Here we process them nondeterministically.</label>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="select" x="102" y="153">r : rul</label>
			<label kind="guard" x="93" y="170">!barrier_precedes(sw, r) &amp;&amp;
rule_in_cb_32(r, sw)  &amp;&amp;
rule_adds_flow_entry_32(r, sw) and
!rule_installed_32(r, sw)</label>
			<label kind="assignment" x="93" y="246">add_rule_to_ft_32(r, sw),
remove_rule_from_cq_32(r, sw)</label>
			<label kind="comments" x="178" y="127">INSTALL RULE</label>
			<nail x="170" y="144"/>
			<nail x="114" y="141"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="select" x="51" y="-161">r : rul</label>
			<label kind="guard" x="34" y="-93">!barrier_precedes(sw, r) &amp;&amp;
rule_in_cb_32(r, sw)  &amp;&amp;
!rule_adds_flow_entry_32(r, sw) and
rule_installed_32(r, sw)</label>
			<label kind="assignment" x="85" y="-17">remove_rule_from_ft_32(r, sw),
remove_rule_from_cq_32(r, sw)</label>
			<label kind="comments" x="178" y="34">UNINSTALL RULE</label>
			<nail x="170" y="34"/>
			<nail x="119" y="34"/>
		</transition>
	</template>
	<system>system undef, pqSw, pIq, pOq, cq;

//system test;</system>
	<queries>
		<query>
			<formula>A[] not collision
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] forall (s: SW) forall (p: pkts) !(packet_has_visited_switch(p,s) and packet_in_pb_32(p,s) )
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] forall (s: SW) forall (p: pkts) not (Packets[p].reached[s] and Packets[p].pq[s] )
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; p_cntr  == 16
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt; p_cntr  &gt;= 15)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not invariant_changed()
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] forall (p: pkts) not (P[p] == invariant_changed)
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
